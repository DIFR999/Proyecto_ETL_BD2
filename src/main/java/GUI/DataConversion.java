/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import clases.DTO.CampoDTO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class DataConversion extends javax.swing.JFrame {
    public boolean concatenar;
    public String TipoExtraer;
    public String tipoDatosTraFecha;
    /**
     * Creates new form DataConversion
     */
    public DataConversion() {
        initComponents();
        btnConcatenar.setEnabled(false);
        btnMinuscula.setEnabled(false);
        btnMayuscula.setEnabled(false);
        btnExtraerF.setEnabled(false);
        cmbIOpciones.setVisible(false);
        lblAlias.setVisible(false);
        txtAlias.setVisible(false); 
        lblTituloCo.setVisible(false);
        btnConfirmarOperacion.setVisible(false);
        DefaultComboBoxModel camposT =new DefaultComboBoxModel();
        
        
         try {
                //Si no se selecciono campos
                if(FormularioETL.camposSelectOrigen.isEmpty()){
                      int i = 0;

                        for (CampoDTO campo : MenuPrincipal.campos) {

                             camposT.addElement(MenuPrincipal.campos.get(i).getColumnName()+" "+MenuPrincipal.campos.get(i).getDataType()
                                     +" "+MenuPrincipal.campos.get(i).getMaxLength());
                            i++;
                        }
                //Si se seleciono campos
                }else{
                      int i = 0;

                        for (CampoDTO campo : FormularioETL.camposSelectOrigen) {

                             camposT.addElement(FormularioETL.camposSelectOrigen.get(i).getColumnName()+" "+FormularioETL.camposSelectOrigen.get(i).getDataType()
                                     +" "+FormularioETL.camposSelectOrigen.get(i).getMaxLength());
                            i++;
                        }
                }
                this.cmbCamposTran.setModel(camposT);
            }catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Succedio un error inesperado " + e.getMessage());

                    
            }
        
            
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbCamposTran = new javax.swing.JComboBox<>();
        btnMinuscula = new javax.swing.JButton();
        btnMayuscula = new javax.swing.JButton();
        btnExtraerF = new javax.swing.JButton();
        btnConcatenar = new javax.swing.JButton();
        cmbIOpciones = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnConfirmarOperacion = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lblTituloCo = new javax.swing.JLabel();
        txtAlias = new javax.swing.JTextField();
        lblAlias = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setText("Transformar Datos");

        cmbCamposTran.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        cmbCamposTran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCamposTran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCamposTranActionPerformed(evt);
            }
        });

        btnMinuscula.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnMinuscula.setText("Convertir a minúscula");
        btnMinuscula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusculaActionPerformed(evt);
            }
        });

        btnMayuscula.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnMayuscula.setText("Convertir a mayúscula");
        btnMayuscula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMayusculaActionPerformed(evt);
            }
        });

        btnExtraerF.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnExtraerF.setText("Extraer Elementos Fecha");
        btnExtraerF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtraerFActionPerformed(evt);
            }
        });

        btnConcatenar.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnConcatenar.setText("Concatenar");
        btnConcatenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConcatenarActionPerformed(evt);
            }
        });

        cmbIOpciones.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        cmbIOpciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbIOpciones.setRequestFocusEnabled(false);
        cmbIOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIOpcionesActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel2.setText("Campos");

        btnConfirmarOperacion.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnConfirmarOperacion.setText("Confirmar ");
        btnConfirmarOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarOperacionActionPerformed(evt);
            }
        });

        btnSalir.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        btnSalir.setText("Guardar y salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblTituloCo.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblTituloCo.setText("***");

        txtAlias.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblAlias.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        lblAlias.setText("Alias:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(cmbCamposTran, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 193, Short.MAX_VALUE)
                                .addComponent(btnExtraerF)
                                .addGap(36, 36, 36))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(lblAlias)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cmbIOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addComponent(btnConfirmarOperacion))
                                    .addComponent(lblTituloCo))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(301, 301, 301)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnMinuscula)
                .addGap(29, 29, 29)
                .addComponent(btnMayuscula)
                .addGap(44, 44, 44)
                .addComponent(btnConcatenar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(362, 362, 362))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblTituloCo))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCamposTran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbIOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirmarOperacion))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAlias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAlias))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMinuscula)
                    .addComponent(btnMayuscula)
                    .addComponent(btnConcatenar)
                    .addComponent(btnExtraerF))
                .addGap(32, 32, 32)
                .addComponent(btnSalir)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private DefaultComboBoxModel ListaFechas(){
                DefaultComboBoxModel ListaExtraerFecha =new DefaultComboBoxModel();
                ListaExtraerFecha.addElement("Año");
                ListaExtraerFecha.addElement("Mes");
                ListaExtraerFecha.addElement("Dia");
                ListaExtraerFecha.addElement("Hora");                
                return ListaExtraerFecha;

    }
    private void btnExtraerFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtraerFActionPerformed
         cmbIOpciones.setVisible(true);
        btnConfirmarOperacion.setVisible(true);
        lblAlias.setVisible(true);
        txtAlias.setVisible(true);
        btnConfirmarOperacion.setText("Extraer");
         lblTituloCo.setText("Opciones para extraer");
        concatenar= false;
        
        
        cmbIOpciones.setModel(ListaFechas());
        
        
        if(cmbIOpciones.getSelectedItem().toString().equals("Año")){
            TipoExtraer = "YEAR";
            tipoDatosTraFecha= "NUMBER";
        }else if(cmbIOpciones.getSelectedItem().toString().equals("Mes")){
             TipoExtraer = "MONTH";
             tipoDatosTraFecha= "NUMBER";
        }else if(cmbIOpciones.getSelectedItem().toString().equals("Día")){
             TipoExtraer = "DAY";
             tipoDatosTraFecha= "NUMBER";
        }else if(cmbIOpciones.getSelectedItem().toString().equals("Hora")){
             TipoExtraer = "HOUR";
             tipoDatosTraFecha= "VARCHAR2";
        }
        
    }//GEN-LAST:event_btnExtraerFActionPerformed

    private void btnMinusculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusculaActionPerformed
        if(FormularioETL.camposSelectOrigen.isEmpty()){
               MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).lowerColumn();
        }else{
             FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).lowerColumn();
        }
        
        
    }//GEN-LAST:event_btnMinusculaActionPerformed

    private void btnMayusculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMayusculaActionPerformed
         if(FormularioETL.camposSelectOrigen.isEmpty()){
               MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).upperColumn();
        }else{
             FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).upperColumn();
        }
      
    }//GEN-LAST:event_btnMayusculaActionPerformed

    private void cmbCamposTranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCamposTranActionPerformed
        String TipoCampos;
        cmbIOpciones.setVisible(false);
        lblAlias.setVisible(false);
        txtAlias.setVisible(false); 
        btnConfirmarOperacion.setVisible(false);
        lblTituloCo.setVisible(false);
        if(FormularioETL.camposSelectOrigen.isEmpty()){
           
            TipoCampos = MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).getDataType();
            if ("VARCHAR2".equals(TipoCampos) || "CHAR".equals(TipoCampos)) {
                btnConcatenar.setEnabled(true);
                btnMinuscula.setEnabled(true);
                btnMayuscula.setEnabled(true);
                btnExtraerF.setEnabled(false);

            }else if("TIMESTAMP".equals(TipoCampos) || "DATE".equals(TipoCampos)){
                btnConcatenar.setEnabled(false);
                btnMinuscula.setEnabled(false);
                btnMayuscula.setEnabled(false);
                btnExtraerF.setEnabled(true);

             }else{
                  btnConcatenar.setEnabled(false);
                btnMinuscula.setEnabled(false);
                btnMayuscula.setEnabled(false);
                btnExtraerF.setEnabled(false);

            }
 
       }else{
                 TipoCampos = FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).getDataType();
            if ("VARCHAR2".equals(TipoCampos) || "CHAR".equals(TipoCampos)) {
                btnConcatenar.setEnabled(true);
                btnMinuscula.setEnabled(true);
                btnMayuscula.setEnabled(true);
                btnExtraerF.setEnabled(false);

            }else if("TIMESTAMP".equals(TipoCampos) || "DATE".equals(TipoCampos)){
                btnConcatenar.setEnabled(false);
                btnMinuscula.setEnabled(false);
                btnMayuscula.setEnabled(false);
                btnExtraerF.setEnabled(true);

             }else{ //NUMBER o llaves primarias
                btnConcatenar.setEnabled(false);
                btnMinuscula.setEnabled(false);
                btnMayuscula.setEnabled(false);
                btnExtraerF.setEnabled(false);

            }
       }
        
        
    }//GEN-LAST:event_cmbCamposTranActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnConcatenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConcatenarActionPerformed
        lblTituloCo.setVisible(true); 
        cmbIOpciones.setVisible(true);
        btnConfirmarOperacion.setVisible(true);
        txtAlias.setVisible(true);
        lblAlias.setVisible(true);
        lblTituloCo.setText("Campos a concatenar");
        btnConfirmarOperacion.setText("Concatenar Campo");
       
        
        CampoDTO campo2 = new CampoDTO();
        concatenar= true;
        DefaultComboBoxModel camposCon =new DefaultComboBoxModel();
        String TipoCampos;
        //Si no se selecciono campos
        if(FormularioETL.camposSelectOrigen.isEmpty()){
              int i = 0;
                         
                for (CampoDTO campoconver : MenuPrincipal.campos) {
                     TipoCampos = MenuPrincipal.campos.get(i).getDataType(); 
                    if ("VARCHAR2".equals(TipoCampos) || "CHAR".equals(TipoCampos)) {
                     camposCon.addElement(MenuPrincipal.campos.get(i).getColumnName()+" "+MenuPrincipal.campos.get(i).getDataType()
                             +" "+MenuPrincipal.campos.get(i).getMaxLength());
                    }
                     i++;
                }
                this.cmbIOpciones.setModel(camposCon);
        //Si se seleciono campos
        }else{
              int i = 0;
                          
                for (CampoDTO campoconver : FormularioETL.camposSelectOrigen) {
                     TipoCampos =  FormularioETL.camposSelectOrigen.get(i).getDataType(); 
                    if ("VARCHAR2".equals(TipoCampos) || "CHAR".equals(TipoCampos)) {
                     camposCon.addElement(FormularioETL.camposSelectOrigen.get(i).getColumnName()+" "+FormularioETL.camposSelectOrigen.get(i).getDataType()
                             +" "+FormularioETL.camposSelectOrigen.get(i).getMaxLength());
                    }
                     i++;
                }
                this.cmbIOpciones.setModel(camposCon);
        }
        
        
       
        
      
    }//GEN-LAST:event_btnConcatenarActionPerformed

    private void btnConfirmarOperacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarOperacionActionPerformed
        int campos;
        try{    
            if(concatenar){
               if(!(txtAlias.getText().trim().isEmpty())){
                   CampoDTO campo2 = new CampoDTO();
                    if(FormularioETL.camposSelectOrigen.isEmpty()){ 
                        for (int i = 0; i < MenuPrincipal.campos.size(); i++) {
                            if (MenuPrincipal.campos.get(i).getColumnName().equals(cmbCamposTran.getSelectedItem().toString().split(" ")[0])) {
                                campos = i;  // Si encuentras una coincidencia, guarda el índice
                                 campo2 = MenuPrincipal.campos.get(campos);
                                break;  // Rompe el bucle ya que solo necesitas el primer índice que coincida
                            }
                        }                   


                       MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).concatValues(campo2, txtAlias.getText());

                       JOptionPane.showMessageDialog(this, "Se realizo correctamente "+  MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).getColumnNameConvert());
                    }else{
                        for (int i = 0; i < FormularioETL.camposSelectOrigen.size(); i++) {
                            if (FormularioETL.camposSelectOrigen.get(i).getColumnName().equals(cmbCamposTran.getSelectedItem().toString().split(" ")[0])) {
                                campos = i;  // Si encuentras una coincidencia, guarda el índice
                                 campo2 = FormularioETL.camposSelectOrigen.get(campos);
                                break;  // Rompe el bucle ya que solo necesitas el primer índice que coincida
                            }
                        }                   


                       FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).concatValues(campo2, txtAlias.getText());

                       JOptionPane.showMessageDialog(this, "Se realizo correctamente "+ FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).getColumnNameConvert());
                    }
               }else{
                    JOptionPane.showMessageDialog(this, "Ingrese un alias a concatenación");

               }
           }else{ // Cuando se Extraer una fecha
                if(!(txtAlias.getText().trim().isEmpty())){
                    if(FormularioETL.camposSelectOrigen.isEmpty()){ 
                        MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).Extraer(TipoExtraer, txtAlias.getText());
                        MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).setDataType(tipoDatosTraFecha);

                          JOptionPane.showMessageDialog(this, "Se realizo correctamente La extracion "+  MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).getColumnNameConvert()
                           + " " + MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).getDataType());
                       }else{



                          FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).Extraer(TipoExtraer, txtAlias.getText());
                            MenuPrincipal.campos.get(cmbCamposTran.getSelectedIndex()).setDataType(tipoDatosTraFecha);
                          JOptionPane.showMessageDialog(this, "Se realizo correctamente La extracion "+ FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).getColumnNameConvert()
                            + " " +FormularioETL.camposSelectOrigen.get(cmbCamposTran.getSelectedIndex()).getDataType());
                       }
                }else{
                    JOptionPane.showMessageDialog(this, "Ingrese un alias a Extración de fecha");

                }  
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Sucedio un error inesperado, el error es: " +e.getMessage());

        }    
    }//GEN-LAST:event_btnConfirmarOperacionActionPerformed

    private void cmbIOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIOpcionesActionPerformed
        if(cmbIOpciones.getSelectedItem().toString().equals("Año")){
            TipoExtraer = "YEAR";
            tipoDatosTraFecha= "NUMBER";
        }else if(cmbIOpciones.getSelectedItem().toString().equals("Mes")){
             TipoExtraer = "MONTH";
             tipoDatosTraFecha= "NUMBER";
        }else if(cmbIOpciones.getSelectedItem().toString().equals("Día")){
             TipoExtraer = "DAY";
             tipoDatosTraFecha= "NUMBER";
        }else if(cmbIOpciones.getSelectedItem().toString().equals("Hora")){
             TipoExtraer = "HOUR";
             tipoDatosTraFecha= "VARCHAR2";
        }
    }//GEN-LAST:event_cmbIOpcionesActionPerformed

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConcatenar;
    private javax.swing.JButton btnConfirmarOperacion;
    private javax.swing.JButton btnExtraerF;
    private javax.swing.JButton btnMayuscula;
    private javax.swing.JButton btnMinuscula;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbCamposTran;
    private javax.swing.JComboBox<String> cmbIOpciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblAlias;
    private javax.swing.JLabel lblTituloCo;
    private javax.swing.JTextField txtAlias;
    // End of variables declaration//GEN-END:variables
}
